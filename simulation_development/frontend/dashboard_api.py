"""
CedarSim Dashboard API

Flask API server for the CedarSim dashboard frontend.
Serves visualization data generated by AntologyGenerator and FrontendDataGenerator.
"""

from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
import json
import os
from pathlib import Path
import logging
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.core_models import AntologyGenerator, ResourceFactory
from frontend_generator import FrontendDataGenerator

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend

# Global antology instance
antology = None
frontend_generator = None

def initialize_antology():
    """Initialize the AntologyGenerator with sample data."""
    global antology, frontend_generator
    
    logger.info("Initializing AntologyGenerator...")
    
    # Create antology
    antology = AntologyGenerator()
    
    # Add sample locations (in real implementation, load from CSV)
    locations = [
        ("PERPETUAL", "Perpetual"),
        ("ED", "PAR"),
        ("Surgery", "PAR"),
        ("ICU", "PAR"),
        ("Pharmacy", "PAR"),
        ("Central_Lab", "PAR"),
        ("Respiratory_Therapy", "PAR"),
        ("Observation", "PAR"),
        ("Medical_Tele", "PAR"),
        ("Non_Tele", "PAR"),
        ("M_S_Overflow", "PAR"),
        ("PCU", "PAR"),
        ("Telemetry", "PAR"),
        ("Imaging", "PAR"),
        ("EVS", "PAR"),
        ("Facilities", "PAR"),
        ("Sterile_Processing", "PAR"),
        ("Food_Service", "PAR"),
        ("PACU", "PAR")
    ]
    
    for location_id, location_type in locations:
        location = ResourceFactory.create_location(location_id, location_type)
        antology.add_location(location)
    
    # Add sample SKUs (in real implementation, load from CSV)
    sample_skus = [
        ("SKU_001", "Bandages", 100, 2.0, 0),      # Perpetual
        ("SKU_001", "Bandages", 50, 1.5, 10.0),    # ED
        ("SKU_001", "Bandages", 30, 1.0, 5.0),     # Surgery
        ("SKU_001", "Bandages", 20, 1.0, 3.0),     # ICU
        ("SKU_002", "Syringes", 200, 3.0, 0),      # Perpetual
        ("SKU_002", "Syringes", 100, 2.0, 15.0),   # ED
        ("SKU_002", "Syringes", 80, 1.5, 8.0),     # Surgery
        ("SKU_002", "Syringes", 60, 1.0, 5.0),     # ICU
        ("SKU_003", "Gloves", 500, 1.0, 0),        # Perpetual
        ("SKU_003", "Gloves", 200, 0.5, 25.0),     # ED
        ("SKU_003", "Gloves", 150, 0.5, 20.0),     # Surgery
        ("SKU_003", "Gloves", 100, 0.5, 15.0),     # ICU
    ]
    
    for sku_id, name, target_level, lead_time_days, demand_rate in sample_skus:
        # Determine location based on SKU pattern
        if "SKU_001" in sku_id:
            locations = ["PERPETUAL", "ED", "Surgery", "ICU"]
        elif "SKU_002" in sku_id:
            locations = ["PERPETUAL", "ED", "Surgery", "ICU"]
        elif "SKU_003" in sku_id:
            locations = ["PERPETUAL", "ED", "Surgery", "ICU"]
        else:
            locations = ["PERPETUAL"]
        
        for i, location_id in enumerate(locations):
            if i == 0:  # First is perpetual
                sku = ResourceFactory.create_sku(
                    sku_id, location_id, 
                    target_level=target_level, 
                    lead_time_days=lead_time_days, 
                    demand_rate=0
                )
                sku.name = name  # Add name attribute
            else:  # PARs
                sku = ResourceFactory.create_sku(
                    sku_id, location_id, 
                    target_level=target_level//2, 
                    lead_time_days=lead_time_days, 
                    demand_rate=demand_rate
                )
                sku.name = name  # Add name attribute
            
            antology.add_sku(sku)
            
            # Add SKU to location
            location = antology.locations.get(location_id)
            if location:
                location.add_sku(sku)
    
    # Generate network connections
    antology.generate_network_connections()
    antology.finalize_network()
    
    # Create frontend generator
    frontend_generator = FrontendDataGenerator(antology)
    
    logger.info("AntologyGenerator initialized successfully")

@app.route('/')
def index():
    """Serve the main dashboard page."""
    return send_from_directory('.', 'dashboard.html')

@app.route('/api/hospital-layout')
def get_hospital_layout():
    """Get hospital layout data for the vertical 2D view."""
    if not frontend_generator:
        return jsonify({"error": "AntologyGenerator not initialized"}), 500
    
    layout = frontend_generator.generate_hospital_layout()
    return jsonify(layout)

@app.route('/api/skus')
def get_skus():
    """Get list of all SKUs for dropdown selection."""
    if not frontend_generator:
        return jsonify({"error": "AntologyGenerator not initialized"}), 500
    
    frontend_data = frontend_generator.generate_frontend_data()
    return jsonify(frontend_data["sku_list"])

@app.route('/api/sku-connections')
def get_sku_connections():
    """Get SKU connections for visual indicators."""
    if not frontend_generator:
        return jsonify({"error": "AntologyGenerator not initialized"}), 500
    
    frontend_data = frontend_generator.generate_frontend_data()
    return jsonify(frontend_data["sku_connections"])

@app.route('/api/sku/<sku_id>')
def get_sku_details(sku_id):
    """Get detailed information for a specific SKU."""
    if not frontend_generator:
        return jsonify({"error": "AntologyGenerator not initialized"}), 500
    
    frontend_data = frontend_generator.generate_frontend_data()
    sku_connections = frontend_data["sku_connections"]
    
    if sku_id not in sku_connections:
        return jsonify({"error": f"SKU {sku_id} not found"}), 404
    
    return jsonify(sku_connections[sku_id])

@app.route('/api/sku/<sku_id>/timeline')
def get_sku_timeline(sku_id):
    """Get inventory timeline data for a specific SKU."""
    if not frontend_generator:
        return jsonify({"error": "AntologyGenerator not initialized"}), 500
    
    weeks = request.args.get('weeks', 52, type=int)
    timeline = frontend_generator.generate_inventory_timeline(sku_id, weeks)
    
    return jsonify(timeline)

@app.route('/api/pars')
def get_pars():
    """Get list of all PARs."""
    if not antology:
        return jsonify({"error": "AntologyGenerator not initialized"}), 500
    
    pars = []
    for location_id, location in antology.locations.items():
        if location.location_type == "PAR":
            pars.append({
                "id": location_id,
                "name": location_id,
                "sku_count": len(location.skus),
                "total_inventory": location.get_current_level(),
                "stockout_rate": location.get_stockout_rate()
            })
    
    return jsonify(pars)

@app.route('/api/sku/<sku_id>/pars')
def get_sku_pars(sku_id):
    """Get all PARs where this SKU exists."""
    if not frontend_generator:
        return jsonify({"error": "AntologyGenerator not initialized"}), 500
    
    frontend_data = frontend_generator.generate_frontend_data()
    sku_connections = frontend_data["sku_connections"]
    
    if sku_id not in sku_connections:
        return jsonify({"error": f"SKU {sku_id} not found"}), 404
    
    sku_data = sku_connections[sku_id]
    pars = [sku_data["perpetual_sku"]] + sku_data["par_skus"]
    
    return jsonify(pars)

@app.route('/api/simulation/run', methods=['POST'])
def run_simulation():
    """Run simulation with given parameters."""
    if not antology:
        return jsonify({"error": "AntologyGenerator not initialized"}), 500
    
    data = request.get_json()
    weeks = data.get('weeks', 52)
    
    # In real implementation, this would run the SimPy simulation
    # For now, just return a success message
    return jsonify({
        "message": f"Simulation started for {weeks} weeks",
        "status": "running",
        "simulation_id": "sim_001"
    })

@app.route('/api/status')
def get_status():
    """Get system status."""
    if not antology:
        return jsonify({"error": "AntologyGenerator not initialized"}), 500
    
    status = antology.get_network_status()
    return jsonify(status)

if __name__ == '__main__':
    try:
        # Initialize the system
        print("Initializing AntologyGenerator...")
        initialize_antology()
        print("AntologyGenerator initialized successfully!")
        
        # Run the Flask app
        print("Starting Flask server on http://localhost:5000")
        app.run(debug=True, host='0.0.0.0', port=5000)
    except Exception as e:
        print(f"Error starting server: {e}")
        import traceback
        traceback.print_exc()
