"""
CedarSim Dashboard API - Integrated with Real Data

Flask API server for the CedarSim dashboard frontend.
Serves visualization data generated by AntologyGenerator with real CSV data integration.
"""

from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
import json
import os
from pathlib import Path
import logging
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.core_models import AntologyGenerator, ResourceFactory
from .frontend_generator import FrontendDataGenerator
from data.input_data.data_integration import DataIntegrator, create_integrated_antology

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend

# Global instances
antology = None
frontend_generator = None
data_integrator = None

def initialize_antology(use_validation_subset: bool = True):
    """Initialize the AntologyGenerator with real data."""
    global antology, frontend_generator, data_integrator
    
    logger.info("Initializing AntologyGenerator with real data...")
    
    try:
        # Create integrated antology with real data
        antology, data_integrator = create_integrated_antology(use_validation_subset=use_validation_subset)
        
        # Create frontend generator
        frontend_generator = FrontendDataGenerator(antology)
        
        logger.info(f"AntologyGenerator initialized successfully with {len(antology.locations)} locations and {len(antology.skus)} SKUs")
        
    except Exception as e:
        logger.error(f"Failed to initialize AntologyGenerator: {e}")
        # Fallback to sample data if real data fails
        logger.info("Falling back to sample data...")
        _initialize_sample_data()

def _initialize_sample_data():
    """Fallback to sample data if real data loading fails."""
    global antology, frontend_generator
    
    logger.info("Initializing with sample data...")
    
    # Create antology
    antology = AntologyGenerator()
    
    # Add sample locations
    locations = [
        ("PERPETUAL", "Perpetual"),
        ("ED", "PAR"),
        ("Surgery", "PAR"),
        ("ICU", "PAR"),
        ("Pharmacy", "PAR"),
        ("Central_Lab", "PAR"),
        ("Respiratory_Therapy", "PAR"),
        ("Observation", "PAR"),
        ("Medical_Tele", "PAR"),
        ("Non_Tele", "PAR"),
        ("M_S_Overflow", "PAR"),
        ("PCU", "PAR"),
        ("Telemetry", "PAR"),
        ("Imaging", "PAR"),
        ("EVS", "PAR"),
        ("Facilities", "PAR"),
        ("Sterile_Processing", "PAR"),
        ("Food_Service", "PAR"),
        ("PACU", "PAR")
    ]
    
    for location_id, location_type in locations:
        location = ResourceFactory.create_location(location_id, location_type)
        antology.add_location(location)
    
    # Add sample SKUs
    sample_skus = [
        ("SKU_001", "Bandages", 100, 2.0, 0),      # Perpetual
        ("SKU_001", "Bandages", 50, 1.5, 10.0),    # ED
        ("SKU_001", "Bandages", 30, 1.0, 5.0),     # Surgery
        ("SKU_001", "Bandages", 20, 1.0, 3.0),     # ICU
        ("SKU_002", "Syringes", 200, 3.0, 0),      # Perpetual
        ("SKU_002", "Syringes", 100, 2.0, 15.0),   # ED
        ("SKU_002", "Syringes", 80, 1.5, 8.0),     # Surgery
        ("SKU_002", "Syringes", 60, 1.0, 5.0),     # ICU
        ("SKU_003", "Gloves", 500, 1.0, 0),        # Perpetual
        ("SKU_003", "Gloves", 200, 0.5, 25.0),     # ED
        ("SKU_003", "Gloves", 150, 0.5, 20.0),     # Surgery
        ("SKU_003", "Gloves", 100, 0.5, 15.0),     # ICU
    ]
    
    for sku_id, name, target_level, lead_time_days, demand_rate in sample_skus:
        sku = ResourceFactory.create_sku(
            sku_id, 
            "PERPETUAL" if demand_rate == 0 else "ED" if "ED" in name else "Surgery" if "Surgery" in name else "ICU",
            target_level=target_level, 
            lead_time_days=lead_time_days, 
            demand_rate=demand_rate
        )
        sku.name = name
        antology.add_sku(sku)
        
        # Add SKU to appropriate location
        location_id = "PERPETUAL" if demand_rate == 0 else "ED" if "ED" in name else "Surgery" if "Surgery" in name else "ICU"
        location = antology.locations.get(location_id)
        if location:
            location.add_sku(sku)
    
    # Generate network connections
    antology.generate_network_connections()
    antology.finalize_network()
    
    # Create frontend generator
    frontend_generator = FrontendDataGenerator(antology)
    
    logger.info("Sample data initialization completed")

@app.route('/')
def index():
    """Serve the main dashboard page."""
    return send_from_directory(os.path.dirname(__file__), 'dashboard.html')

@app.route('/api/status')
def get_status():
    """Get the current status of the system."""
    if antology is None:
        return jsonify({
            'status': 'not_initialized',
            'message': 'AntologyGenerator not initialized'
        })
    
    return jsonify({
        'status': 'ready',
        'locations': len(antology.locations),
        'skus': len(antology.sku_registry),
        'connections': len(antology.sku_registry)  # Each SKU has connections
    })

@app.route('/api/skus')
def get_sku_list():
    """Get list of all SKUs for the dropdown."""
    if antology is None:
        return jsonify({'error': 'System not initialized'}), 500
    
    try:
        if data_integrator:
            # Use real data integrator
            sku_list = data_integrator.get_sku_list_for_frontend()
        else:
            # Fallback to sample data
            sku_list = []
            seen_skus = set()
            for location in antology.locations.values():
                for sku in location.skus:
                    if sku.sku_id not in seen_skus:
                        sku_list.append({
                            'sku_id': sku.sku_id,
                            'name': getattr(sku, 'name', sku.sku_id),
                            'description': getattr(sku, 'name', sku.sku_id)
                        })
                        seen_skus.add(sku.sku_id)
        
        return jsonify({'skus': sku_list})
    
    except Exception as e:
        logger.error(f"Error getting SKU list: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/sku/<sku_id>')
def get_sku_data(sku_id):
    """Get detailed data for a specific SKU."""
    if antology is None:
        return jsonify({'error': 'System not initialized'}), 500
    
    try:
        if data_integrator:
            # Use real data integrator
            sku_data = data_integrator.get_sku_data_for_frontend(sku_id)
        else:
            # Fallback to sample data
            sku_data = {
                'sku_id': sku_id,
                'locations': {},
                'network_connections': [],
                'summary': {}
            }
            
            # Find the SKU in all locations
            for location_id, location in antology.locations.items():
                for sku in location.skus:
                    if sku.sku_id == sku_id:
                        sku_data['locations'][location_id] = {
                            'location_id': location_id,
                            'location_type': location.location_type,
                            'current_inventory': sku.current_inventory_level,
                            'target_level': sku.target_level,
                            'demand_rate': sku.demand_rate,
                            'lead_time_days': sku.lead_time_days,
                            'is_stockout': sku.current_inventory_level <= 0,
                            'is_understocked': sku.current_inventory_level < sku.target_level * 0.5
                        }
                        break
            
            # Get network connections for this SKU
            if sku_id in antology.sku_connections:
                sku_data['network_connections'] = antology.sku_connections[sku_id]
            
            # Calculate summary statistics
            locations = list(sku_data['locations'].values())
            if locations:
                sku_data['summary'] = {
                    'total_locations': len(locations),
                    'total_inventory': sum(loc['current_inventory'] for loc in locations),
                    'stockout_locations': sum(1 for loc in locations if loc['is_stockout']),
                    'understocked_locations': sum(1 for loc in locations if loc['is_understocked']),
                    'avg_demand_rate': sum(loc['demand_rate'] for loc in locations) / len(locations) if locations else 0
                }
        
        return jsonify(sku_data)
    
    except Exception as e:
        logger.error(f"Error getting SKU data for {sku_id}: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/hospital-layout')
def get_hospital_layout():
    """Get the hospital layout data."""
    if frontend_generator is None:
        return jsonify({'error': 'Frontend generator not initialized'}), 500
    
    try:
        layout_data = frontend_generator.generate_hospital_layout()
        return jsonify(layout_data)
    
    except Exception as e:
        logger.error(f"Error getting hospital layout: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/sku-connections')
def get_sku_connections():
    """Get SKU connection data."""
    if frontend_generator is None:
        return jsonify({'error': 'Frontend generator not initialized'}), 500
    
    try:
        connections_data = frontend_generator.generate_sku_connections()
        return jsonify(connections_data)
    
    except Exception as e:
        logger.error(f"Error getting SKU connections: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/inventory-data/<sku_id>')
def get_inventory_data(sku_id):
    """Get inventory time series data for a specific SKU."""
    if frontend_generator is None:
        return jsonify({'error': 'Frontend generator not initialized'}), 500
    
    try:
        inventory_data = frontend_generator.generate_inventory_data(sku_id)
        return jsonify(inventory_data)
    
    except Exception as e:
        logger.error(f"Error getting inventory data for {sku_id}: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/export-data')
def export_data():
    """Export all frontend data to JSON file."""
    if frontend_generator is None:
        return jsonify({'error': 'Frontend generator not initialized'}), 500
    
    try:
        output_path = frontend_generator.export_all_data()
        return jsonify({
            'message': 'Data exported successfully',
            'file_path': str(output_path)
        })
    
    except Exception as e:
        logger.error(f"Error exporting data: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    # Initialize with validation subset by default (faster for testing)
    # Set to False to use full 5,941 SKU dataset
    initialize_antology(use_validation_subset=True)
    
    # Run the Flask app
    app.run(debug=True, host='0.0.0.0', port=5000)
